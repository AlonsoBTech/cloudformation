AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation for VPC'

Resources:
# My VPC
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: MyVPC

# Public Subnet in AZ 1  
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet-1

# Public Subnet in AZ 2   
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name 
          Value: Public Subnet-2

# Private Application Subnet in AZ 1   
  AppPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: !Ref MyVPC 
      CidrBlock: '10.0.2.0/24' 
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: 
        - Key: Name 
          Value: Application Subnet-1

# Private Application Subnet in AZ 2
  AppPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: !Ref MyVPC 
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags: 
        - Key: Name 
          Value: Application Subnet-2 

# Private Database Subnet in AZ 1  
  DataPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: !Ref MyVPC 
      CidrBlock: '10.0.6.0/24' 
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: 
      - Key: Name 
        Value: Database Subnet-1 

# Private Database Subnet in AZ 2   
  DataPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC 
      CidrBlock: '10.0.8.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name 
          Value: Database Subnet-2
  
# Internet GAteway for VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags: 
        - Key: Name 
          Value: MyVpc-IGW

# Attach Internet Gateway to VPC
  AttachInternetGateway: 
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC 
      InternetGatewayId: !Ref InternetGateway

# Public Route Table
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable' 
    Properties: 
      VpcId: !Ref MyVPC
      Tags: 
        - Key: Name 
          Value: Public Rouet Table

# Public Route
  PublicRoute: 
    Type: 'AWS::EC2::Route' 
    DependsOn: AttachInternetGateway 
    Properties: 
      RouteTableId: !Ref PublicRouteTable 
      DestinationCidrBlock: '0.0.0.0/0' 
      GatewayId: !Ref InternetGateway 

# Public Subnet 1 Route Table Association
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties: 
      SubnetId: !Ref PublicSubnet1 
      RouteTableId: !Ref PublicRouteTable

# Web Server & ASG Security Group
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable HTTP Access'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'

# Launch Configuration
  MyLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: 'ami-07cc17c75a0c7b117'
      InstanceType: 't2.micro'
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash 
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd 
          echo "Hello from Auto Scaling Instance" > /var/www/html/index.html 

# AutoScaling Group
  MyAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref MyLaunchConfiguration
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      VPCZoneIdentifier: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

# Alarm
  HighCPUAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Alarm when CPU exceeds 70%'
      MetricName: 'CPUUtilization'
      Namespace: 'AWS/EC2'
      Statistic: Average
      Period: '300' 
      EvaluationPeriods: '1' 
      Threshold: '70' 
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyAutoScalingGroup
      AlarmActions:
        - !Ref ScaleOutPolicy 

# Scale Out Policy
  ScaleOutPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      PolicyType: SimpleScaling 
      ScalingAdjustment: '1' 
      Cooldown: '300' 
      AdjustmentType: ChangeInCapacity

